name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
  JAVA_VERSION: 17
  GRADLE_VERSION: 8.x

jobs:
  validate:
    name: Validate Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 🔍 Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🛡️ Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: ${{ env.JAVA_HOME_17_X64 }}
        with:
          project: 'SoundR'
          path: '.'
          format: 'HTML'
          out: 'reports'

      - name: 📊 Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: reports

  build:
    name: Build, Test & Package
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [validate]

    strategy:
      matrix:
        variant: [Debug, Release]
        include:
          - variant: Debug
            apkPath: app/build/outputs/apk/debug/app-debug.apk
            testTask: testDebugUnitTest
            lintTask: lintDebug
          - variant: Release
            apkPath: app/build/outputs/apk/release/app-release-unsigned.apk
            testTask: testReleaseUnitTest
            lintTask: lintRelease

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: 🏃‍♂️ Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: 🛠 Setup Android SDK
        run: |
          echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/cmdline-tools/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH" >> $GITHUB_ENV

      - name: ✅ Accept SDK licenses
        run: yes | sdkmanager --licenses

      - name: 📝 Check Code Formatting
        run: ./gradlew spotlessCheck

      - name: 🔍 Run Lint
        run: ./gradlew ${{ matrix.lintTask }}

      - name: 🧪 Run Unit Tests
        run: ./gradlew ${{ matrix.testTask }} jacocoTestReport

      - name: 🏗 Build APK
        run: ./gradlew assemble${{ matrix.variant }} --stacktrace

      - name: 📊 Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.variant }}
          path: |
            **/build/reports/tests/
            **/build/reports/jacoco/
            **/build/reports/lint-results-*.html

      - name: ☁️ Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.variant | downcase }}.apk
          path: ${{ matrix.apkPath }}

  instrumented-tests:
    name: Instrumented Tests
    runs-on: macos-latest
    timeout-minutes: 45
    needs: [build]

    strategy:
      matrix:
        api-level: [29, 31]
        target: [google_apis]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: 📱 AVD Cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: 📱 Create AVD and generate snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot."

      - name: 🧪 Run Instrumented Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: Nexus 6
          script: ./gradlew connectedDebugAndroidTest

      - name: 📊 Upload Instrumented Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: instrumentation-test-results-${{ matrix.api-level }}
          path: '**/build/reports/androidTests/'

  notify:
    name: Telegram Notification
    runs-on: ubuntu-latest
    needs: [build, instrumented-tests, security]
    if: always()

    steps:
      - name: 📢 Send Telegram Notification
        if: ${{ failure() || success() }}
        run: |
          STATUS_EMOJI="${{ success() && '✅' || '❌' }}"
          STATUS_TEXT="${{ success() && 'Success' || 'Failed' }}"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode=Markdown \
            -d text="${STATUS_EMOJI} *CI ${STATUS_TEXT}* в \`${{ github.repository }}\`%0A• Branch: \`${{ github.ref_name }}\`%0A• Commit: \`${{ github.sha }}\`%0A[View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
